{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// =====================================пробная версия 1 ============================================\n// const refs = {\n//     startBtn: document.querySelector('[data-start]'),\n//     clockfacedays: document.querySelector('[data-days]'),\n//     clockfacehour: document.querySelector('[data-hours]'),\n//     clockfacedaysminutes: document.querySelector('[data-minutes]'),\n//     clockfacedayssecond: document.querySelector('[data-seconds]'),\n// }\n\n// let intervalId;\n\n// refs.startBtn.addEventListener('click', () => {\n    // refs.startBtn.disabled = true;\n  \n//     const initTime = Date.now(); // с инпута взять значение\n\n//     intervalId = setInterval(() => {\n//         const currentTime = Date.now();\n//         const diff = currentTime - initTime;\n//         const time = convertMs(diff);\n//         const str = getTime(time);\n\n//         refs.clockface.textContent = str;\n//     }, 1000)\n\n//     setTimeout(() => {\n//     clearInterval(intervalId);\n//     }, initTime - Date.now() - 1000);\n    \n\n// });\n\n// =====================================================================================\n\n// function convertMs(ms) {\n  // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n  // Remaining days\n//   const days = Math.floor(ms / day);\n  // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function getTime(d, h, m, s) {\n//     d = toString();\n//     h = toString();\n//     m = toString();\n//     s = toString();\n\n//     return `${d} ${d} ${m} ${s}`\n// }\n\n\n// =============================================Вариант 2=========================================================================\n\nlet userSelectedDate = null;\n    const startButton = document.querySelector('[data-start]');\n    const daysSpan = document.querySelector('[data-days]');\n    const hoursSpan = document.querySelector('[data-hours]');\n    const minutesSpan = document.querySelector('[data-minutes]');\n    const secondsSpan = document.querySelector('[data-seconds]');\nlet countdownInterval;\n    \n\n//  необходимо выбрать дату \nflatpickr(\"#datetime-picker\", {\nenableTime: true,\ntime_24hr: true,\ndefaultDate: new Date(),\nminuteIncrement: 1,\nonClose: function(selectedDates) {\nconst selectedDate = selectedDates[0];\nconst currentDate = new Date();\n                \n    if (selectedDate <= currentDate) {\n        iziToast.error({\n            title: 'Error',\n                message: 'Please choose a date in the future',\n    });\n        startButton.disabled = true;\n    } else {\n    userSelectedDate = selectedDate;\n    startButton.disabled = false;\n    }\n}\n});\n\n\n//  обработчик для кнопки Старт Важно сделать не активной после нажатия \nstartButton.addEventListener('click', function() {\nstartButton.disabled = true;\n    if (userSelectedDate) {\n    startCountdown(userSelectedDate);\n    }\n});\n\n\n//  необходим расчет от какой даты до конечной \nfunction startCountdown(endDate) {\nclearInterval(countdownInterval);\ncountdownInterval = setInterval(function() {\n    const now = new Date().getTime();\n    const distance = endDate - now;\n\nif (distance <= 0) {\n    clearInterval(countdownInterval);\n        updateTimer(0, 0, 0, 0);\n} else {\n    const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n    updateTimer(days, hours, minutes, seconds);\n}\n    }, 1000);\n}\n\n//  необходимо выводить значение остатка\nfunction updateTimer(days, hours, minutes, seconds) {\n    daysSpan.textContent = formatTime(days);\n    hoursSpan.textContent = formatTime(hours);\n    minutesSpan.textContent = formatTime(minutes);\n    secondsSpan.textContent = formatTime(seconds);\n}\n\n//  обновлять в числа где нет 2-х чисел 0\nfunction formatTime(time) {\n    return time < 10 ? `0${time}` : time;\n}\n"],"names":["userSelectedDate","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","countdownInterval","flatpickr","selectedDates","selectedDate","iziToast","startCountdown","endDate","now","distance","updateTimer","days","hours","minutes","seconds","formatTime","time"],"mappings":"sGAsEA,IAAIA,EAAmB,KACnB,MAAMC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAC/D,IAAIC,EAIJC,EAAU,mBAAoB,CAC9B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAS,SAASC,EAAe,CACjC,MAAMC,EAAeD,EAAc,CAAC,EAG5BC,GAFY,IAAI,MAGhBC,EAAS,MAAM,CACX,MAAO,QACH,QAAS,oCACzB,CAAK,EACGT,EAAY,SAAW,KAE3BD,EAAmBS,EACnBR,EAAY,SAAW,GAE3B,CACA,CAAC,EAIDA,EAAY,iBAAiB,QAAS,UAAW,CACjDA,EAAY,SAAW,GACfD,GACJW,EAAeX,CAAgB,CAEnC,CAAC,EAID,SAASW,EAAeC,EAAS,CACjC,cAAcN,CAAiB,EAC/BA,EAAoB,YAAY,UAAW,CACvC,MAAMO,EAAM,IAAI,KAAM,EAAC,QAAO,EACxBC,EAAWF,EAAUC,EAE/B,GAAIC,GAAY,EACZ,cAAcR,CAAiB,EAC3BS,EAAY,EAAG,EAAG,EAAG,CAAC,MACvB,CACH,MAAMC,EAAO,KAAK,MAAMF,EAAY,KAAoB,EAClDG,EAAQ,KAAK,MAAOH,GAAY,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EACxEI,EAAU,KAAK,MAAOJ,GAAY,IAAO,GAAK,KAAQ,IAAO,GAAG,EAChEK,EAAU,KAAK,MAAOL,GAAY,IAAO,IAAO,GAAI,EAE1DC,EAAYC,EAAMC,EAAOC,EAASC,CAAO,CAC7C,CACK,EAAE,GAAI,CACX,CAGA,SAASJ,EAAYC,EAAMC,EAAOC,EAASC,EAAS,CAChDjB,EAAS,YAAckB,EAAWJ,CAAI,EACtCb,EAAU,YAAciB,EAAWH,CAAK,EACxCb,EAAY,YAAcgB,EAAWF,CAAO,EAC5Cb,EAAY,YAAce,EAAWD,CAAO,CAChD,CAGA,SAASC,EAAWC,EAAM,CACtB,OAAOA,EAAO,GAAK,IAAIA,CAAI,GAAKA,CACpC"}